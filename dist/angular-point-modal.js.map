{"version":3,"sources":["angular-point-modal-service.ts","index.ts"],"names":["ap","ap.modal","ap.modal.APModal","ap.modal.APModal.constructor","ap.modal.APModal.cancel","ap.modal.APModal.deleteListItem","ap.modal.APModal.saveListItem","ap.modal.APModal.generateError","ap.modal.APModalService","ap.modal.APModalService.constructor","ap.modal.APModalService.modalModelProvider","ap.modal.APModalService.modalModelProvider.openModal","ap.modal.unlockOnClose"],"mappings":"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","file":"angular-point-modal.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\r\n\r\nmodule ap.modal {\r\n    'use strict';\r\n\r\n    //TODO: Remove once we can import toastr as dependency\r\n    if(!window.toastr) {\r\n        window.toastr = {\r\n            error: console.error,\r\n            info: console.info,\r\n            success: console.info,\r\n            warning: console.warn\r\n        }\r\n    }\r\n    var $uibModal: angular.ui.bootstrap.IModalService, $q: ng.IQService;\r\n\r\n    export interface IPermObject {\r\n        resolvePermissions(): {\r\n            EditListItems: boolean;\r\n            DeleteListItems: boolean;\r\n            ApproveItems: boolean;\r\n            FullMask: boolean;\r\n        };\r\n    }\r\n\r\n    export class APModal {\r\n        $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance;\r\n        displayMode: string;\r\n        fullControl = false;\r\n        listItem: ListItem<any>\r\n        negotiatingWithServer = false;\r\n        userCanApprove = false;\r\n        userCanDelete = false;\r\n        userCanEdit = false;\r\n\r\n        constructor(listItem: ListItem<any>, $uibModalInstance: ng.ui.bootstrap.IModalServiceInstance) {\r\n\r\n            //Manually declare to make it more obvious what's available to all child classes\r\n            this.listItem = listItem;\r\n            this.$uibModalInstance = $uibModalInstance;\r\n\r\n            var resolvePermissions = (permObj: IPermObject) => {\r\n                var userPermMask = permObj.resolvePermissions();\r\n                this.userCanEdit = userPermMask.EditListItems;\r\n                this.userCanDelete = userPermMask.DeleteListItems;\r\n                this.userCanApprove = userPermMask.ApproveItems;\r\n                this.fullControl = userPermMask.FullMask;\r\n            };\r\n\r\n            if (listItem && listItem.id && listItem.resolvePermissions) {\r\n                resolvePermissions(listItem);\r\n            } else if (listItem.getModel && listItem.getModel().resolvePermissions) {\r\n                /** Fallback to retrieve permissions from the model when a list item isn't available */\r\n                resolvePermissions(listItem.getModel());\r\n            }\r\n\r\n            /** Check if it's a new form */\r\n            if (!listItem || !listItem.id) {\r\n                this.displayMode = 'New';\r\n            } else if (this.userCanEdit) {\r\n                this.displayMode = 'Edit';\r\n            } else {\r\n                this.displayMode = 'View';\r\n            }\r\n        }\r\n\r\n        cancel(): void {\r\n            this.$uibModalInstance.dismiss('cancel');\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apModalService:deleteListItem\r\n         * @methodOf angularPoint.apModalService\r\n         * @description\r\n         * Prompts for confirmation of deletion, then deletes and closes modal\r\n         * @param {object} [options] Options to pass to ListItem.deleteItem().\r\n         * @example\r\n         *\r\n         * <pre>\r\n         * <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.deleteListItem()\"\r\n         *          ng-show=\"vm.projectDocument.id && vm.userCanDelete\"\r\n         *          title=\"Delete this document.\">\r\n         *      <i class=\"fa fa-trash-o\"></i>\r\n         *  </button>\r\n         * </pre>\r\n         */\r\n        deleteListItem(options?): ng.IPromise<any> {\r\n            var confirmation = window.confirm('Are you sure you want to delete this record?');\r\n            if (confirmation) {\r\n                /** Disable form buttons */\r\n                this.negotiatingWithServer = true;\r\n\r\n                return this.listItem.deleteItem(options)\r\n                    .then(() => {\r\n                        toastr.success('Record deleted successfully');\r\n                        return this.$uibModalInstance.close();\r\n                    }).catch((err) => {\r\n                        throw this.generateError('deleting', err);\r\n                    });\r\n            }\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apModalService:saveListItem\r\n         * @methodOf angularPoint.apModalService\r\n         * @description\r\n         * Creates a new record if necessary, updates list item if it already exists, and closes\r\n         * if no significant changes have been made.\r\n         * @param {object} [options] Options to pass to ListItem.saveChanges().\r\n         * @example\r\n         * <pre>\r\n         *  <button class=\"btn btn-primary\" type=\"submit\"\r\n         *      ng-disabled=\"vm.form.$invalid || !vm.userCanEdit\">Save</button>\r\n         * </pre>\r\n         */\r\n        saveListItem(options?): ng.IPromise<any> {\r\n            let promise;\r\n\r\n            if (this.listItem.id && this.listItem.isPristine()) {\r\n                promise = $q.when(this.listItem);\r\n                //No significant changes have been made so just close\r\n                this.cancel();\r\n            } else {\r\n                promise = this.listItem.saveChanges(options);\r\n\r\n                promise\r\n                    .then(() => {\r\n                        toastr.success('Record updated');\r\n                        this.$uibModalInstance.close();\r\n                    })\r\n                    .catch((err) => {\r\n                        throw this.generateError('updating', err);\r\n                    });\r\n            }\r\n\r\n            return promise;\r\n        }\r\n        private generateError(action: string, err): Error {\r\n            toastr.error(`There was a problem ${action} this record.  We've logged the issue and are looking into it.  Any additional information you can provide would be appreciated.`);\r\n            return new Error(`Summary: Error ${action} list item from modal.\r\n                Error: ${err}\r\n                ListItem: ${JSON.stringify(this.listItem, null, 2) }`);\r\n        }\r\n    }\r\n\r\n    export class APModalService {\r\n        static $inject = ['$uibModal', '$q'];\r\n\r\n        constructor(_$uibModal_, _$q_) {\r\n            $uibModal = _$uibModal_;\r\n            $q = _$q_;\r\n        }\r\n\r\n        /**\r\n         * @ngdoc function\r\n         * @name angularPoint.apModalService:modalModelProvider\r\n         * @methodOf angularPoint.apModalService\r\n         * @description\r\n         * Extends a model to allow us to easily attach a modal form that accepts and injects a\r\n         * dynamic number of arguments.\r\n         * @param {object} config Configuration object.\r\n         * @param {string} config.templateUrl Reference to the modal view.\r\n         * @param {string} config.controller Name of the modal controller.\r\n         * @param {function} [config.resolver] Pass arguments received to this function which creates the necessary resolve object.\r\n         * @param {boolean} [config.lock] Use sync service to register a lock event.\r\n         * @returns {function(any=): angular.IPromise<any>} Function which returns openModal that in turn returns a promise.\r\n         *\r\n         * @example\r\n         * <pre>\r\n         *    model.openModal = apModalService.modalModelProvider({\r\n         *        templateUrl: 'modules/comp_request/views/comp_request_modal_view.html',\r\n         *        controller: 'compRequestModalCtrl',\r\n         *        controllerAs: 'vm',\r\n         *        resolver: function(project) {\r\n         *            return {\r\n         *                project: () => project\r\n         *            }\r\n         *        }\r\n         *    });\r\n         * </pre>\r\n         */\r\n        modalModelProvider(config: { templateUrl: string; controller: string; resolver?: Function; size?: string; controllerAs?: string; lock?: boolean; }): (listItem?) => angular.IPromise<any> {\r\n            return function openModal(listItem?: ap.ListItem<any>) {\r\n                var model = this, lockInfo;\r\n                listItem = listItem || model.createEmptyItem();\r\n\r\n                var defaults = {\r\n                    templateUrl: config.templateUrl,\r\n                    controller: config.controller,\r\n                    resolve: {}\r\n                };\r\n\r\n                /** Pass through any arguments to the resolver function to allow for dynamic resolve object\r\n                 * to be created with the only assumption being the list item being edited is the first param */\r\n                if (_.isFunction(config.resolver)) {\r\n                    defaults.resolve = config.resolver.apply(config.resolver, arguments);\r\n                }\r\n\r\n                /** Optionally lock the list item for editing if the the sync service is included */\r\n                if (config.lock) {\r\n                    lockInfo = listItem.lock();\r\n                    defaults.resolve.lockInfo = () => lockInfo;\r\n                }\r\n\r\n                var modalConfig = _.assign({}, defaults, config);\r\n                var modalInstance = $uibModal.open(modalConfig);\r\n\r\n                if (listItem.id) {\r\n\r\n                    modalInstance.result\r\n                        .then(function() {\r\n                            unlockOnClose(config.lock, lockInfo);\r\n                        })\r\n                        .catch(function() {\r\n                            /** Revert back any changes that were made to editable fields, leaving changes made\r\n                             * to readonly fields like attachments */\r\n                            listItem.setPristine(listItem);\r\n                            unlockOnClose(config.lock, lockInfo);\r\n                        });\r\n                }\r\n\r\n                return modalInstance.result;\r\n            };\r\n        }\r\n\r\n\r\n    }\r\n\r\n    function unlockOnClose(lock, lockInfo) {\r\n        if (lock) {\r\n            //Users without sufficient permissions won't be able to lock so only unlock in the event\r\n            lockInfo.then((resolvedInfo) => _.isFunction(resolvedInfo.unlock) ? resolvedInfo.unlock() : undefined);\r\n        }\r\n    }\r\n\r\n}\r\n","/// <reference path=\"../typings/tsd.d.ts\" />\r\n/// <reference path=\"../typings/ap.d.ts\" />\r\n\r\nmodule ap.modal {\r\n    'use strict';\r\n\r\n    /**\r\n     * @ngdoc service\r\n     * @name ap.apModalService\r\n     * @description\r\n     * Extends a modal form to include many standard functions\r\n     *\r\n     */\r\n    angular.module('apModal', ['angularPoint', 'ui.bootstrap'])\r\n        .service('apModalService', APModalService);\r\n}"],"sourceRoot":"/source/"}