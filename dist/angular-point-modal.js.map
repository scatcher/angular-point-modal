{"version":3,"sources":["angular-point-modal-service.ts","index.ts"],"names":["ap","ap.modal","ap.modal.APModal","ap.modal.APModal.constructor","ap.modal.APModal.cancel","ap.modal.APModal.deleteListItem","ap.modal.APModal.saveListItem","ap.modal.takeListItemSnapshot","ap.modal.APModalService","ap.modal.APModalService.constructor","ap.modal.APModalService.modalModelProvider","ap.modal.APModalService.modalModelProvider.openModal"],"mappings":"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","file":"angular-point-modal.js","sourceRoot":"/source/","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nmodule ap.modal {\n    'use strict';\n\n\n    var toastr, $modal: angular.ui.bootstrap.IModalService;\n\n    export interface IPermObject {\n        resolvePermissions(): {\n            EditListItems: boolean;\n            DeleteListItems: boolean;\n            ApproveItems: boolean;\n            FullMask: boolean;\n        };\n    }\n\n    export class APModal {\n        displayMode: string;\n        fullControl = false;\n        negotiatingWithServer = false;\n        userCanApprove = false;\n        userCanDelete = false;\n        userCanEdit = false;\n\n        constructor(private listItem, private $modalInstance) {\n\n\n            var resolvePermissions = (permObj: IPermObject) => {\n                var userPermMask = permObj.resolvePermissions();\n                this.userCanEdit = userPermMask.EditListItems;\n                this.userCanDelete = userPermMask.DeleteListItems;\n                this.userCanApprove = userPermMask.ApproveItems;\n                this.fullControl = userPermMask.FullMask;\n            };\n\n            if (listItem && listItem.id && listItem.resolvePermissions) {\n                resolvePermissions(listItem);\n            } else if (listItem.getModel && listItem.getModel().resolvePermissions) {\n                /** Fallback to retrieve permissions from the model when a list item isn't available */\n                resolvePermissions(listItem.getModel());\n            }\n\n            /** Check if it's a new form */\n            if (!listItem || !listItem.id) {\n                this.displayMode = 'New';\n            } else if (this.userCanEdit) {\n                this.displayMode = 'Edit';\n            } else {\n                this.displayMode = 'View';\n            }\n        }\n\n        cancel(): void {\n            this.$modalInstance.dismiss('cancel');\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apModalService:deleteListItem\n         * @methodOf angularPoint.apModalService\n         * @description\n         * Prompts for confirmation of deletion, then deletes and closes modal\n         * @param {object} [options] Options to pass to ListItem.deleteItem().\n         * @example\n         *\n         * <pre>\n         * <button type=\"button\" class=\"btn btn-danger\" ng-click=\"vm.deleteListItem()\"\n         *          ng-show=\"vm.projectDocument.id && vm.userCanDelete\"\n         *          title=\"Delete this document.\">\n         *      <i class=\"fa fa-trash-o\"></i>\n         *  </button>\n         * </pre>\n         */\n        deleteListItem(options?): ng.IPromise<any> {\n            var confirmation = window.confirm('Are you sure you want to delete this record?');\n            if (confirmation) {\n                /** Disable form buttons */\n                this.negotiatingWithServer = true;\n\n                return this.listItem.deleteItem(options).then(() => {\n                    toastr.success('Record deleted successfully');\n                    this.$modalInstance.close();\n                }, function() {\n                    toastr.error('Failed to delete record.  Please try again.');\n                });\n            }\n        }\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apModalService:saveListItem\n         * @methodOf angularPoint.apModalService\n         * @description\n         * Creates a new record if necessary, otherwise updates the existing record\n         * @param {object} [options] Options to pass to ListItem.saveChanges().\n         * @example\n         * <pre>\n         *  <button class=\"btn btn-primary\" type=\"submit\"\n         *      ng-disabled=\"vm.form.$invalid || !vm.userCanEdit\">Save</button>\n         * </pre>\n         */\n        saveListItem(options?): ng.IPromise<any> {\n            var promise = this.listItem.saveChanges(options);\n\n            promise.then(() => {\n                toastr.success('Record updated');\n                this.$modalInstance.close();\n            }, () => {\n                toastr.error('There was a problem updating this record.  Please try again.');\n            });\n\n            return promise;\n        }\n    }\n\n    /** Create a copy of all non-readonly fields so we can restore those values if necessary */\n    function takeListItemSnapshot(listItem): Object {\n        var model = listItem.getModel();\n        var snapshot = {};\n        _.each(model.list.fields, function(fieldDefinition) {\n            if (!fieldDefinition.readOnly) {\n                snapshot[fieldDefinition.mappedName] = listItem[fieldDefinition.mappedName];\n            }\n        });\n        return snapshot;\n    }\n\n    export class APModalService {\n        static $inject = ['toastr', '$modal'];\n        \n        constructor(_toastr_, _$modal_) {\n            toastr = _toastr_;\n            $modal = _$modal_;\n\n        }\n\n\n        /**\n         * @ngdoc function\n         * @name angularPoint.apModalService:modalModelProvider\n         * @methodOf angularPoint.apModalService\n         * @description\n         * Extends a model to allow us to easily attach a modal form that accepts and injects a\n         * dynamic number of arguments.\n         * @param {object} config Configuration object.\n         * @param {string} config.templateUrl Reference to the modal view.\n         * @param {string} config.controller Name of the modal controller.\n         * @param {function} [config.resolver] Pass arguments received to this function which creates the necessary resolve object.\n         * @param {boolean} [config.lock] Use sync service to register a lock event.\n         * @returns {function(any=): angular.IPromise<any>} Function which returns openModal that in turn returns a promise.\n         *\n         * @example\n         * <pre>\n         *    model.openModal = apModalService.modalModelProvider({\n         *        templateUrl: 'modules/comp_request/views/comp_request_modal_view.html',\n         *        controller: 'compRequestModalCtrl',\n         *        controllerAs: 'vm',\n         *        resolver: function(project) {\n         *            return {\n         *                project: () => project\n         *            }\n         *        }\n         *    });\n         * </pre>\n         */\n        modalModelProvider(config: { templateUrl: string; controller: string; resolver?: Function; size?: string; controllerAs?: string; lock?: boolean; }): (listItem?) => angular.IPromise<any> {\n            return function openModal(listItem?) {\n                var model = this, snapshot, lockInfo;\n                listItem = listItem || model.createEmptyItem();\n\n                var defaults = {\n                    templateUrl: config.templateUrl,\n                    controller: config.controller,\n                    resolve: {}\n                };\n\n                /** Pass through any arguments to the resolver function to allow for dynamic resolve object\n                 * to be created with the only assumption being the list item being edited is the first param */\n                if (_.isFunction(config.resolver)) {\n                    defaults.resolve = config.resolver.apply(config.resolver, arguments);\n                }\n\n                /** Optionally lock the list item for editing if the the sync service is included */\n                if (config.lock) {\n                    lockInfo = listItem.lock();\n                    defaults.resolve.lockInfo = () => lockInfo;\n                }\n\n                var modalConfig = _.assign({}, defaults, config);\n                var modalInstance = $modal.open(modalConfig);\n\n                if (listItem.id) {\n\n                    /** Create a copy in case we need to revert back */\n                    snapshot = takeListItemSnapshot(listItem);\n\n                    modalInstance.result.then(function() {\n                        if (config.lock) {\n                            lockInfo.then((resolvedInfo) => resolvedInfo.unlock());\n                        }\n\n                    }, function() {\n                        /** Revert back any changes that were made to editable fields, leaving changes made\n                         * to readonly fields like attachments */\n                        _.assign(listItem, snapshot);\n\n                        if (config.lock) {\n                            lockInfo.then((resolvedInfo) => resolvedInfo.unlock());\n                        }\n                    });\n                }\n\n                return modalInstance.result;\n            };\n        }\n\n    }\n\n\n\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"../typings/ap.d.ts\" />\n\nmodule ap.modal {\n    'use strict';\n\t\n        /**\n     * @ngdoc service\n     * @name ap.apModalService\n     * @description\n     * Extends a modal form to include many standard functions\n     *\n     */\n    angular.module('angularPoint')\n        .service('apModalService', APModalService);\n}"]}